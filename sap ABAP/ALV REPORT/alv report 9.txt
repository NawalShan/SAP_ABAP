*&---------------------------------------------------------------------*
*& Report ZNAWAL_SALV_TABLE8
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZNAWAL_SALV_TABLE8.
CLASS lcl_salv_TABLE DEFINITION.
  PUBLIC SECTION.
  TYPES ty_vbak TYPE znawal_vbak.
  DATA it_vbak TYPE TABLE OF zvnawal_vbak.
  DATA o_alv TYPE REF TO cl_salv_table.

  METHODS get_data.
  methods output.

  PRIVATE SECTION.
     METHODS:
      set_pf_status
        CHANGING
          o_status TYPE REF TO cl_salv_table.

      METHODS: set_colors
        CHANGING
          o_color  TYPE REF TO cl_salv_table
          ct_vbak TYPE ty_vbak.

  ENDCLASS.

  START-OF-SELECTION.
    DATA lo_value TYPE REF TO lcl_salv_table.
    CREATE OBJECT lo_value.

    lo_value->get_data( ).
    lo_value->output( ).

  CLASS lcl_salv_TABLE IMPLEMENTATION.
    METHOD get_data.
      SELECT vbeln audat netwr kunnr INTO TABLE it_vbak FROM vbak.
      ENDMETHOD.
     METHOD output.
      DATA: lx_msg TYPE REF TO cx_salv_msg.
    TRY.
        cl_salv_table=>factory(
*          EXPORTING
*            list_display   = if_salv_c_bool_sap=>false " ALV Displayed in List Mode
*            r_container    =                           " Abstract Container for GUI Controls
*            container_name =
          IMPORTING
            r_salv_table   =    o_alv                       " Basis Class Simple ALV Tables
          CHANGING
            t_table        = it_vbak
        ).
*        CATCH cx_salv_msg. " ALV: General Error Class with Message
      CATCH cx_salv_msg INTO lx_msg.
    ENDTRY.
    o_alv->display( ).
    ENDMETHOD.

METHOD set_pf_status.
*
    DATA: lo_functions TYPE REF TO cl_salv_functions_list.
*
    lo_functions = o_status->get_functions( ).
    lo_functions->set_default( abap_true ).
*
  ENDMETHOD.
  METHOD set_colors.
*
*.....Color for COLUMN.....
    DATA: lo_cols_tab TYPE REF TO cl_salv_columns_table,
          lo_col_tab  TYPE REF TO cl_salv_column_table.
    DATA: ls_color TYPE lvc_s_colo.    " Colors strucutre
*
*   get Columns object
    lo_cols_tab = o_color->get_columns( ).
*
    INCLUDE <color>.
*
*   Get ERDAT column & set the yellow Color fot it
    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'ERDAT' ).
        ls_color-col = col_total.
        lo_col_tab->set_color( ls_color ).
      CATCH cx_salv_not_found.
    ENDTRY.
*
*.......Color for Specific Cell & Rows.................
*   Applying color on the 3rd Row and Column AUART
*   Applying color on the Entire 5th Row
*
    DATA: lt_s_color TYPE lvc_t_scol,
          ls_s_color TYPE lvc_s_scol,
          la_vbak    LIKE LINE OF ct_vbak,
          l_count    TYPE i.
*
    LOOP AT ct_vbak INTO la_vbak.
      l_count = l_count + 1.
      CASE l_count.
*       Apply RED color to the AUART Cell of the 3rd Row
        WHEN 3.
          ls_s_color-fname     = 'AUART'.
          ls_s_color-color-col = col_negative.
          ls_s_color-color-int = 0.
          ls_s_color-color-inv = 0.
          APPEND ls_s_color TO lt_s_color.
          CLEAR  ls_s_color.
*
*       Apply GREEN color to the entire row # 5
*         For entire row, we don't pass the Fieldname
        WHEN 5.
          ls_s_color-color-col = col_positive.
          ls_s_color-color-int = 0.
          ls_s_color-color-inv = 0.
          APPEND ls_s_color TO lt_s_color.
          CLEAR  ls_s_color.
      ENDCASE.
*     Modify that data back to the output table
      la_vbak-t_color = lt_s_color.
      MODIFY ct_vbak FROM la_vbak.
      CLEAR  la_vbak.
      CLEAR  lt_s_color.
    ENDLOOP.
*
*   We will set this COLOR table field name of the internal table to
*   COLUMNS tab reference for the specific colors
    TRY.
        lo_cols_tab->set_color_column( 'T_COLOR' ).
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.
*
  ENDMETHOD.


    ENDCLASS.